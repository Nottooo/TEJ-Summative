package Summative;

import static com.qualcomm.robotcore.hardware.DcMotor.ZeroPowerBehavior.BRAKE;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;
import org.openftc.easyopencv.OpenCvCamera;
import org.openftc.easyopencv.OpenCvCameraFactory;
import org.openftc.easyopencv.OpenCvCameraRotation;
import org.openftc.easyopencv.OpenCvInternalCamera;
import org.openftc.easyopencv.OpenCvPipeline;

@TeleOp
public class Tracker extends LinearOpMode
{
    private DcMotorEx yawMotor;
    private Servo lServo, rServo;

    public double lServoPos = 0.5;
    public double rServoPos = 0.5;

    public boolean manualMode = false;
    public boolean automaticMode = false;

    OpenCvCamera camera;
    objPipeline pipeline;

    @Override
    public void runOpMode() {
        yawMotor = hardwareMap.get(DcMotorEx.class, "yawMotor");
        yawMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        yawMotor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        yawMotor.setZeroPowerBehavior(BRAKE);

        lServo = hardwareMap.get(Servo.class, "lServo");
        rServo = hardwareMap.get(Servo.class, "rServo");

        //Starting the webcam
        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        camera = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam 1"), cameraMonitorViewId);
        pipeline = new objPipeline();
        camera.setPipeline(pipeline);
        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
        {
            @Override
            public void onOpened()
            {
                //starts streaming the camera
                camera.startStreaming(1280,720, OpenCvCameraRotation.UPRIGHT);
            }

            @Override
            public void onError(int errorCode)
            {
                // will only happen if the camera is not working
            }
        });

        waitForStart();

        while (opModeIsActive())
        {
            //determines which mode that the user would want to use!
            if (gamepad1.a){
                manualMode = true;
                automaticMode = false;
            }

            if (gamepad1.b){
                manualMode = false;
                automaticMode = true;
            }

            //MANUAL MODE
            if (manualMode == true) {
                if (gamepad1.dpad_up && lServoPos < 0.6) {
                    lServoPos += 0.01;
                    rServoPos += 0.01;
                }

                if (gamepad1.dpad_down && lServoPos > 0.3) {
                    lServoPos -= 0.01;
                    rServoPos -= 0.01;
                }

                //always set the servo to a given position
                lServo.setPosition(lServoPos);
                rServo.setPosition(rServoPos);

                if (gamepad1.dpad_right && yawMotor.getCurrentPosition() < 40) {
                    yawMotor.setPower(0.1);
                }
                else if (gamepad1.dpad_left && yawMotor.getCurrentPosition() > -40) {
                    yawMotor.setPower(-0.1);
                }
                else{
                    yawMotor.setPower(0);
                }
            }

            if (automaticMode == true){
                //resets the servos pitch to a straight angle
                lServo.setPosition(0.5);
                rServo.setPosition(0.5);

                //finds the position of the object infront of the camera and moves towards it
                if (pipeline.getAnalysis() == objPipeline.ObjectPosition.RIGHT && yawMotor.getCurrentPosition() < 40) {
                    yawMotor.setPower(0.03);
                }
                else if (pipeline.getAnalysis() == objPipeline.ObjectPosition.LEFT && yawMotor.getCurrentPosition() > -40) {
                    yawMotor.setPower(-0.03);
                }
                else {
                    yawMotor.setPower(0);
                }
            }

            //returns data in telemetry
            telemetry.addData("Manual Mode", manualMode);
            telemetry.addData("Automatic Mode", automaticMode);
            telemetry.addData("Yaw", yawMotor.getCurrentPosition());
            telemetry.addData("Left Servo Position", lServoPos);
            telemetry.addData("Right Servo Position", rServoPos);
            telemetry.addData("Analysis", pipeline.getAnalysis());
            telemetry.update();

            // Don't burn CPU cycles busy-looping in this sample
            sleep(50);
        }
    }

    public static class objPipeline extends OpenCvPipeline
    {
        public enum ObjectPosition
        {
            LEFT,
            CENTER,
            RIGHT
        }

        //colors
        static final Scalar BLUE = new Scalar(0, 0, 255);
        static final Scalar GREEN = new Scalar(0, 255, 0);

        /*
         * The core values which define the location and size of the sample regions
         */
        static final Point REGION1_TOPLEFT_ANCHOR_POINT = new Point(1,98);
        static final Point REGION2_TOPLEFT_ANCHOR_POINT = new Point(401,98);
        static final Point REGION3_TOPLEFT_ANCHOR_POINT = new Point(801,98);
        static final int REGION_WIDTH = 399;
        static final int REGION_HEIGHT = 600;

        //defines areas
        Point region1_pointA = new Point(
                REGION1_TOPLEFT_ANCHOR_POINT.x,
                REGION1_TOPLEFT_ANCHOR_POINT.y);
        Point region1_pointB = new Point(
                REGION1_TOPLEFT_ANCHOR_POINT.x + REGION_WIDTH,
                REGION1_TOPLEFT_ANCHOR_POINT.y + REGION_HEIGHT);
        Point region2_pointA = new Point(
                REGION2_TOPLEFT_ANCHOR_POINT.x,
                REGION2_TOPLEFT_ANCHOR_POINT.y);
        Point region2_pointB = new Point(
                REGION2_TOPLEFT_ANCHOR_POINT.x + REGION_WIDTH,
                REGION2_TOPLEFT_ANCHOR_POINT.y + REGION_HEIGHT);
        Point region3_pointA = new Point(
                REGION3_TOPLEFT_ANCHOR_POINT.x,
                REGION3_TOPLEFT_ANCHOR_POINT.y);
        Point region3_pointB = new Point(
                REGION3_TOPLEFT_ANCHOR_POINT.x + REGION_WIDTH,
                REGION3_TOPLEFT_ANCHOR_POINT.y + REGION_HEIGHT);

        //creates new YCrCb Mat
        Mat region1_Cb, region2_Cb, region3_Cb;
        Mat YCrCb = new Mat();
        Mat Cb = new Mat();
        int avg1, avg2, avg3;

        private volatile ObjectPosition position = ObjectPosition.CENTER;

        //converts RGB into YCrCb as this allows for better detection and extracts Cb
        void inputToCb(Mat input)
        {
            Imgproc.cvtColor(input, YCrCb, Imgproc.COLOR_RGB2YCrCb);
            Core.extractChannel(YCrCb, Cb, 2);
        }

        @Override
        public void init(Mat firstFrame)
        {
            inputToCb(firstFrame);
            region1_Cb = Cb.submat(new Rect(region1_pointA, region1_pointB));
            region2_Cb = Cb.submat(new Rect(region2_pointA, region2_pointB));
            region3_Cb = Cb.submat(new Rect(region3_pointA, region3_pointB));
        }

        @Override
        public Mat processFrame(Mat input)
        {

            //gets the Cb value after the YCrCb conversion
            inputToCb(input);

            //computes the mean pixel value of a region
            avg1 = (int) Core.mean(region1_Cb).val[0];
            avg2 = (int) Core.mean(region2_Cb).val[0];
            avg3 = (int) Core.mean(region3_Cb).val[0];

            //find which region it's in
            if(avg1 > avg2 && avg1 > avg3)
            {
                position = ObjectPosition.LEFT;
            }
            else if(avg2 > avg1 && avg2 > avg3)
            {
                position = ObjectPosition.CENTER;
            }
            else if(avg3 > avg1 && avg3 > avg2)
            {
                position = ObjectPosition.RIGHT;
            }
            return input;
        }

        public ObjectPosition getAnalysis()
        {
            return position;
        }
    }
}